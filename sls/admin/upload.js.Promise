'use strict'

const AWS = require('aws-sdk')
var fs = require('fs')

AWS.config.loadFromPath('/home/rlrobert/trainthroughplay/sls/config.json');
const docClient = new AWS.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});
const s3 = new AWS.S3();

const Promise = require('promise');
const objectsTable = 'trainthroughplay-dev-objectsDB-9YCS8JQXUTQI'
const STAGE = 'dev'

function ddbScan(ddbTable) {
  return new Promise((resolve, reject) => {

//  Call DynamoDB to get key metadata
  var ddbParams = { TableName: ddbTable }

//  console.log('ddbParams',ddbParams)

  // Call DynamoDB to query the table
  docClient.scan(ddbParams, function(err, data) {
    if (err) {
      console.log("Error", err);
      var result = { "Error": err};
      reject();
    } else {
      resolve(data);
    }
  }); //End of docClient query
  }); //End of Promise
}  //End of ddbScan function

function getObjectId(objectsDB,video) {
  return new Promise((resolve, reject) => {

    var name = video.split('.')[0]

    objectsDB.forEach(function(object) {
    if (object.VideoTitle.toLowerCase() == name.toLowerCase()) {
//      console.log("Obj:",object.VideoTitle.toLowerCase(),"Name:",name.toLowerCase(),object.ObjectId)
      resolve({"Name": video, "Id":object.ObjectId})
    }
    })
    resolve({"Name": video, "Id":"Unknown"})
  })
}

function putObject(object) {
  return new Promise((resolve, reject) => {
    var bucket = 'trainthroughplay-dev-media'
    var prefix = 'videos/'.concat(object.Id)
    var params = {
      Bucket: bucket, /* required */
      Prefix: prefix,
    };
    s3.listObjects(params, function(err, data) {
      if (err) console.log(err, err.stack); // an error occurred
      else {
        if (data.Contents.length == 0) {
          console.log("Uploading object %s...",object.Name);
          console.log(videosLocation.concat('/',object.Name))
          var srcFile = fs.createReadStream(videosLocation.concat('/',object.Name));
          params = { Bucket:      bucket,
                     Key:         'videos/'.concat(object.Id),
                     ContentType: 'video/mp4',
                     Body:        srcFile }
          s3.putObject(params, function (err, data) {
            if (err) {
              console.log("Error uploading image: ", err);
              reject(err);
            } else {
              console.log("Successfully uploaded image on S3", data);
              resolve(data);
            }
          })  
        }
        else {
          console.log("Skipping object %s - already exists with Id: %s",object.Name,object.Id);         
        }
      } 
    });

  }) // end of Promise
} // end of putObject function

function processFile(objectsDB,Files,filenum) {
  return new Promise((resolve, reject) => {

  var id = ''
  var name = ''
  var video = Files[filenum]
  
  if (filenum < Files.length) {
    console.log("Processing video %s %d %d",video,filenum,Files.length);
    name=video.split('.')[0]
    console.log("VIDEO: %s", video)
    if (name != '') {
      getObjectId(objectsDB,video)
      .then(function (object) {
        if (object.Id != "Unknown") {
//                   console.log("%s",object.Name)
//                   console.log("%s: %s", object.Id,object.Name)
            putObject(object)
            .then(function(result) {
                console.log("putObject RESULT: %s", result);
            })
            .catch(function(err) {
                console.log("putObject ERROR: %s", err);
            }) // end of putObject call
        }
        else {
            console.log("Cannot find Id for: %s",object.Name);
        }
      })
      .catch(function(err) {
        console.log("getObjectId ERROR: %s", err);
      }) // end of getObjectId call
    } //end of name is empty if statement
    processFile(objectsDB,Files,filenum+1)
    .then(function (result) {
      console.log("RESULT: %s",result);
    })
    .catch(function(err) {
      console.log("processFile ERROR: %s", err);
    }) // end of processFile call
  } // end of Files.length if statement
  resolve("File processed: %s",video);
  }) // end of Promise
} // end of processFile function

//    var videosLocation = '/home/rlrobert/Dropbox/Champs Puppy Training'
    var videosLocation = '/home/rlrobert/UploadTest'
    
    ddbScan(objectsTable)
    .then(function (result) 
    {
      var objectsDB = result.Items;

//      console.log("objectsDB:",objectsDB)
      fs.readdir( videosLocation,function (err, files) {
          processFile(objectsDB,files,0)
          .then(function (result) {
            console.log("RESULT: %s",result);
          })
          .catch(function(err) {
            console.log("processFile ERROR: %s", err);
          }) // end of processFile call
      })

    })
    .catch (function(err) {
      console.log("ddbScan Error:",err)
    })

